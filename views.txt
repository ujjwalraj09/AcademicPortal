from django.contrib.auth.decorators import login_required
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from .models import Student, Enrollment, Course, Announcement, Cart
from django.contrib.auth.models import User
from django.views.generic import ListView, DetailView
from django.conf import settings
from django.http import HttpResponse

def Home(response):
    return render(response,"base/base.html")



@login_required
def dashboard(request):
    try:
       
        # Retrieve the enrollments for the student
        enrollments = Enrollment.objects.filter(student=request.user)
        
        # Extract the courses from the enrollments
        courses = [enrollment.course for enrollment in enrollments]
        
        return render(request, 'base/dashboard.html', {'courses': courses})
    except Student.DoesNotExist:
        # Handle the case where the student does not exist
        return render(request, 'student_not_found.html')
    

class CourseDetailView(DetailView):
    model = Course
    template_name = 'base/course.html'
    context_object_name = 'course'
    pk_url_kwarg = 'course_id'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        course = self.get_object()
        context['announcements'] = Announcement.objects.filter(course=course)
        
        student = self.request.user.student
        try:
            enrollment = Enrollment.objects.get(student=self.request.user, course=course)
            context['enrollment'] = enrollment
        except Enrollment.DoesNotExist:
            context['enrollment'] = None

        return context
    
    
def download_file(request, announcement_id):
    announcement = get_object_or_404(Announcement, id=announcement_id)
    file_path = announcement.files.path
    with open(file_path, 'rb') as f:
        response = HttpResponse(f.read(), content_type='application/force-download')
        response['Content-Disposition'] = 'attachment; filename=%s' % announcement.files.name
        return response
    

def register(request):
    user = request.user
    student = user.student
    # if student.isregistered:
    #     messages.error(request, "You are already registered.")
    #     return redirect('dashboard')
  
    branch = student.branch
    branch_cdc_courses = []
    if branch:
        branch_cdc_courses = branch.cdc_courses.all()

    if branch_cdc_courses:
        all_courses = Course.objects.exclude(pk__in=branch_cdc_courses.values_list('pk', flat=True))
    else:
        all_courses = Course.objects.all()

    # Create a new cart for the student if it doesn't exist
    cart, created = Cart.objects.get_or_create(user=user)
    if created:
        student.cart = cart
        student.save()

    cart_courses = student.cart.courses.all()
    return render(request, 'base/register.html', {'courses': all_courses, 'cart_courses': cart_courses})
    
def cart(request):
    user = request.user
    student = user.student
    # if student.isregistered:
    #     messages.error(request, "You are already registered.")
    #     return redirect('dashboard')
    cart_courses = student.cart.courses.all() if hasattr(student, 'cart') else []
    return render(request, 'base/cart.html', {'cart_courses': cart_courses})

def add_to_cart(request, course_id):
    # Retrieve the course based on the course_id
    course = Course.objects.get(pk=course_id)

    # Assuming you have a student associated with the request user
    user = request.user
    student = user.student

    # Get or create the cart for the student
    cart, created = Cart.objects.get_or_create(user=user)
    student.cart = cart
    student.save()

    # Add the course to the student's cart
    student.cart.courses.add(course)

    # Redirect back to the register page
    return redirect('register')

   
    return redirect('register')  

def remove_from_cart(request, course_id):
    # Retrieve the course based on the course_id
    course = get_object_or_404(Course, pk=course_id)

    # Assuming you have a student associated with the request user
    user = request.user
    student = user.student

    # Remove the course from the student's cart
    student.cart.courses.remove(course)

    # Redirect back to the cart page or another page
    return redirect('register')  # Change 'cart' to the appropriate URL name for the cart page

def save_cart(request):
    user = request.user

    # if student.isregistered:
    #     messages.error(request, "You are already registered.")
    #     return redirect('dashboard')
   
    cart_courses = user.cart.courses.all() if hasattr(user, 'cart') else []

    # Create an enrollment for each course in the cart
    for course in cart_courses:
        Enrollment.objects.create(student=user, course=course)
        
    # Set isregistered to True
   
    user.save()

    # Clear the cart
    user.cart.courses.clear()

    return redirect('home')
